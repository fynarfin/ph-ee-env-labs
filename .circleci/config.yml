version: 2.1
orbs:
  slack: circleci/slack@4.12.5
  helm: circleci/helm@2.0.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  fynarfin-orb: fynarfin/docker-image-availability-check-and-upgrade@1.0.2
jobs:
  build-and-host-ph-ee-kenya:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/ph-ee-kenya/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - run: rm -f helm/ph-ee-kenya/Chart.lock helm/ph-ee-kenya/requirements.lock helm/ph-ee-kenya/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: build-and-host-ph-ee-kenya
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
                echo Charts will save in https://fynarfin.io/images$JIRA_STORY_DIR
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY"
            echo "CHART URL is $CHART_URL"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "10s@^ *repository:.*\$@  repository: $CHART_URL@" helm/ph-ee-kenya/Chart.yaml
              sed -i "11s@^ *version:.*\$@  version: 0.0.0-SNAPSHOT$JIRA_STORY@" helm/ph-ee-kenya/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/ph-ee-engine-0.0.0-SNAPSHOT"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "5s/.*/version: 0.0.0$JIRA_STORY/" helm/ph-ee-kenya/Chart.yaml
            cat helm/ph-ee-kenya/Chart.yaml
            helm dep up helm/ph-ee-kenya
            helm package helm/ph-ee-kenya
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-kenya-0.0.0$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-kenya-0.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-kenya-0.0.0$JIRA_STORY index.yaml ph-ee-kenya-0.0.0$JIRA_STORY.tgz
  minikube-run-helm-upgrade-and-helm-test:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: large
    environment:
      TERM: dumb
    parameters:
      namespace:
        default: "paymenthub"
        description: |
          The kubernetes namespace that should be used.
        type: string
      release-name:
        default: "ph-ee-kenya"
        description: |
          Specify a name for the release.
        type: string
      cluster-name:
        default: "minikube"
        type: string
      service-file-path:
        default: https://raw.githubusercontent.com/fynarfin/ph-ee-env-labs/kenya-chart/.circleci/services.txt
        type: string
      chart-base-url:
        default: https://fynarfin.io/images/fynarfin
        type: string
      chart-name:
        default: ph-ee-kenya
        type: string
      chart-version:
        default: 0.0.0
        type: string
      minimal_requirement_yaml:
        default: minimal-requirement-yaml
        type: string
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/ph-ee-kenya/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: run minikube
          no_output_timeout: 40m
          command: |
            free -m
            #!/bin/bash
            #insatll kubectl--------
            echo hello 
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gpg
            sudo mkdir -p /etc/apt/keyrings
            sudo touch -y /etc/apt/keyrings/kubernetes-apt-keyring.gpg || echo done
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubelet kubeadm kubectl
            sudo apt-mark hold kubelet kubeadm kubectl

            #Setup Minikube
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
            sudo dpkg -i minikube_latest_amd64.deb
            echo minikube waiting
            minikube config set cpus 4
            minikube config set memory 15721
            minikube start #--extra-config=kubelet.max-pods=60 --cpus max --memory max --disk-size 50g
            echo "Minikube started-----------------------------------------------------"
            minikube addons enable metrics-server
            # To check the allocated values 
            #minikube config get cpus
            #minikube config get memory

            MINIKUBE_IP=`minikube ip`
            echo $MINIKUBE_IP
            # cat ~/.kube/config

            minikube kubectl -- get po -A #Interact with Minikube cluster
            kubectl create namespace paymenthub
            kubectl get -A namespace  

            # # For remote access to minikube uncomment the following lines.
            # #---------------------minikube remote aceess start---------------------
            # sudo apt install nginx        
            # sudo touch /etc/nginx/conf.d/minikube.conf 
            # echo "create nginx conf"
            # sudo chmod 777 -R /etc/nginx/conf.d/
            # echo "changed access"

            # sudo apt-get install apache2-utils -y
            # echo "apache2-utils installed"
            # htpasswd -bc /home/circleci/project/.htpasswd minikube minikube

            # sudo cat \<<EOF > /etc/nginx/conf.d/minikube.conf 
            # server {
            #    listen       8080;
            #    listen [::]:8080;
            #    server_name  localhost;
            #    access_log /home/circleci/project/nginx_access.log;
            #   auth_basic "Administrators Area";
            #   auth_basic_user_file /home/circleci/project/.htpasswd;    

            #    location / {   
            #        proxy_pass https://$MINIKUBE_IP:8443;
            #        proxy_ssl_certificate /home/circleci/.minikube/profiles/minikube/client.crt;
            #        proxy_ssl_certificate_key /home/circleci/.minikube/profiles/minikube/client.key;
            #    }
            # }
            # EOF
            # sudo service nginx restart || echo 'start nginx'
            # SYSTEMD_LESS=FRXMK  systemctl status nginx.service

            # sleep 10
            
            # echo "test-nginx-proxy"
            # curl -u minikube:minikube http://localhost:8080

            # curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
            # ngrok config add-authtoken $AUTH_TOKEN
            # echo "web_addr: $LOCAL_PORT" >> /home/circleci/.config/ngrok/ngrok.yml
            # ngrok http 8080 > /dev/null &

            # echo -n "Extracting ngrok public url ."
            # NGROK_PUBLIC_URL=""
            # while [ -z "$NGROK_PUBLIC_URL" ]; do
            #   # Run 'curl' against ngrok API and extract public (using 'sed' command)
            #   export NGROK_PUBLIC_URL=$(curl --silent --max-time 10 --connect-timeout 5 \
            #                             --show-error http://127.0.0.1:$LOCAL_PORT/api/tunnels | \
            #                             sed -nE 's/.*public_url":"https:..([^"]*).*/\1/p')
            #   sleep 1
            #   echo -n "."
            # done
            # echo ---------copy the below public_URL for NGrok----------
            # echo "https://$NGROK_PUBLIC_URL"
            # echo "https://$NGROK_PUBLIC_URL"

            # echo "test ngrok "
            # curl -u minikube:minikube https://$NGROK_PUBLIC_URL
            # echo "https://$NGROK_PUBLIC_URL"
            # # ---------------------minikube remote access end---------------------

            curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
            sudo apt-get install apt-transport-https --yes
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
            sudo apt-get update
            sudo apt-get install helm
            kubectl create namespace paymenthub || echo namespace already exists
            minikube ssh -- free -m
            echo ------------MEMORY CHECK -----------

      - run:
          no_output_timeout: 20m
          name: fetch docker images and helm upgrade
          environment:
            ORB_CHART_BASE_URL: << parameters.chart-base-url >>
            ORB_CHART_NAME: << parameters.chart-name >>
            ORB_CHART_VERSION: << parameters.chart-version >>
            ORB_PARAM_NAMESPACE: << parameters.namespace >>
            ORB_PARAM_RELEASE_NAME: << parameters.release-name >>
            ORB_PARAM_MINIMAL_REQUIREMENT_YAML: << parameters.minimal_requirement_yaml >>
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
            VALUES_TO_OVERRIDE: ''
            SERVICE_FILE_PATH: << parameters.service-file-path>>
          command: |
            function get_services_from_file() {
                file=$1
                while IFS= read -r line || [ -n "$line" ]; do
                  generate_values_to_override $line
                done < "$file"
            }

            function generate_values_to_override() {
              PREFIX="docker.io/"
              if [ "$CIRCLE_BRANCH" != "develop" ] && check_for_image_tag ${2#"$PREFIX"} ${JIRA_STORY}; then
                  echo "image: < $1=$2:$JIRA_STORY >"
                  VALUES_TO_OVERRIDE+=$(echo "$1=$2:$JIRA_STORY"),
              else
                  echo "image: < $1=$2:latest >"
                  VALUES_TO_OVERRIDE+=$(echo "$1=$2:latest"),
              fi
            }
            function check_for_image_tag(){
              curl --silent -f --head -lL https://hub.docker.com/v2/repositories/$1/tags/$2/ > /dev/null
            }
            if [ "$CIRCLE_BRANCH" != "develop" ]; then

              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi 

            echo $SERVICE_FILE_PATH
            wget $SERVICE_FILE_PATH 
            filename=$(basename "$SERVICE_FILE_PATH")
            #Using sed replace ph-ee-g2psandbox. with empty string
            sed -i 's/ph-ee-g2psandbox\.//g' $filename 
            echo $filename
            get_services_from_file $filename
            if [ -n "${VALUES_TO_OVERRIDE}" ]; then
                VALUES_TO_OVERRIDE=$(echo --set ${VALUES_TO_OVERRIDE::-1})
                echo "VALUES_TO_OVERRIDE: $VALUES_TO_OVERRIDE"
            fi

            if [ -n "${ORB_PARAM_NAMESPACE}" ]; then
                ORB_PARAM_NAMESPACE=$(echo --namespace ${ORB_PARAM_NAMESPACE})
            fi
            if [ -n "${JIRA_STORY}" ]; then
              JIRA_STORY=-$(echo $JIRA_STORY)
            fi

            # Generating the chart url for deployment
            # chart: "https://fynarfin.io/images/fynarfin/ph-ee-kenya/ph-ee-kenya-0.0.0.tgz"
            ORB_PARAM_CHART=$(echo "$ORB_CHART_BASE_URL$JIRA_STORY_DIR/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz")

            CHART_URL="$ORB_PARAM_CHART"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              echo "chart used: < $CHART_URL >"
              # add-repo: "https://fynarfin.io/images/fynarfin/ph-ee-kenya"
              ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL$JIRA_STORY_DIR/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY")
            else
              CHART_URL="https://fynarfin.io/images/ph-ee-kenya/ph-ee-kenya-0.0.0.tgz"
              ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL/$ORB_CHART_NAME-$ORB_CHART_VERSION")
              echo "chart used: < $CHART_URL >"
            fi

            echo helm repo add "${ORB_PARAM_RELEASE_NAME}" "${ORB_PARAM_REPO}"
            helm repo add "${ORB_PARAM_RELEASE_NAME}" "${ORB_PARAM_REPO}"

            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml #Install ServiceMonitor
            helm repo update
            echo "helm upgrade --install ${VALUES_TO_OVERRIDE} ${ORB_PARAM_RELEASE_NAME} ${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE}"
            echo helm chart install starts

            # Download ph-ee-kenya-chart and extract
            curl -O $ORB_CHART_BASE_URL$JIRA_STORY_DIR/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz && tar xvf $ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz
            rm -rf $ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz
            
            # Download minimal requiremnet yaml files
            curl -o minimal_requirements.yaml $ORB_CHART_BASE_URL/$ORB_PARAM_MINIMAL_REQUIREMENT_YAML/minimal_requirements.yaml
            curl -o minimal_requirements_p1.yaml $ORB_CHART_BASE_URL/$ORB_PARAM_MINIMAL_REQUIREMENT_YAML/minimal_requirements_p1.yaml
            curl -o minimal_requirements_p2.yaml $ORB_CHART_BASE_URL/$ORB_PARAM_MINIMAL_REQUIREMENT_YAML/minimal_requirements_p2.yaml

            ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL/$ORB_CHART_NAME")
            EXTRA_VALUES=$(echo "-f minimal_requirements.yaml -f minimal_requirements_p1.yaml")
            helm upgrade ${EXTRA_VALUES} --install  --timeout=1h ${VALUES_TO_OVERRIDE} ${ORB_PARAM_RELEASE_NAME} ${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE}
            echo --------------------helm upgrade in Phase 1 done---------------------

            ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL/$ORB_CHART_NAME")
            EXTRA_VALUES=$(echo "-f minimal_requirements.yaml -f minimal_requirements_p2.yaml")
            helm upgrade ${EXTRA_VALUES} --install  --timeout=1h ${VALUES_TO_OVERRIDE} ${ORB_PARAM_RELEASE_NAME} ${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE}
            echo --------------------helm upgrade in Phase 2 done---------------------

            echo --------------------helm upgrade is done---------------------
            sleep 1m;

            # ----------------------Post-Installation-Steps-starts---------------------------
            # #ES and Kibana secret creation
            # git clone -b 7.17 https://github.com/elastic/helm-charts.git elastic/helm-charts
            # cd elastic/helm-charts/elasticsearch/examples/security/
            # make secrets || echo "elastic-secrets" already exists
            # git clone -b 7.17 https://github.com/elastic/helm-charts.git elastic/helm-charts
            # cd elastic/helm-charts/kibana/examples/security/
            # make secrets || echo "kibana-secrets" already exists
            # kubectl get secret elastic-certificate-crt -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret elastic-certificate-pem -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret elastic-certificates -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret elastic-credentials -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret kibana -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secrets -n paymenthub
            # echo ---------secrets created--------

            # #insatll netcat
            # sudo apt install -y netcat
            # check_count=0
            # until ((check_count==20)) || nc -vz ph-ee-zeebe-ops 80; do 
            #     echo "Waiting for zeebe-ops service"; 
            #     sleep 5; 
            #     check_count=$(($check_count + 1));
            # done;
            # echo ------zeebe-ops service available-----------
            # # until nc -vz ph-ee-zeebe-ops 80; do echo "Waiting for zeebe-ops service"; sleep 2; done;

            # #Deploy BPMN 
            # kubectl port-forward service/ph-ee-zeebe-ops 5000:80 -n paymenthub & #portforward zeebe-ops &'
            # git clone https://github.com/fynarfin/ph-ee-env-labs.git fynarfin/ph-ee-env-labs
            # cd fynarfin/ph-ee-env-labs/orchestration
            # ls
            # sed -i "/HOST=/c\HOST=http://localhost:5000/zeebe/upload" deployBpmn.sh
            # cat deployBpmn.sh
            # cd ..
            # sh orchestration/deployBpmn.sh || echo 'deploy Bpmn done'
            #------------------Post-Installation-Steps-ends-------------------------------

      - run:
          name: Run Helm Tests
          command: |
            helm test ph-ee-kenya --filter name=g2p-sandbox-test-common --namespace paymenthub || echo test

      - run:
          name: Fetch Integration Test Report
          command: |
            #!/bin/bash
            mkdir -p integration_report/test-report

            echo "Fetch Integration Test Report for common"
            kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-common |cut -d " " -f1`:/ph-ee-connector-integration-test/build integration_report/test-report
            # Specify the path to the downloaded file
            downloaded_file="integration_report/test-report/cucumber.xml"
            # Loop until the file is not empty
            while [ ! -s $downloaded_file ]; do
                echo "File is empty, waiting..."
                sleep 60  # You can adjust the sleep interval as needed
                kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-common |cut -d " " -f1`:/ph-ee-connector-integration-test/build/ integration_report/test-report
                downloaded_file="integration_report/test-report/cucumber.xml"
            done
            echo "File is no longer empty, processing..."
            mv integration_report/test-report/cucumber.xml integration_report/test-report/cucumber_common.xml
            mv integration_report/test-report/reports/tests/test integration_report/test-report/reports/tests/test_common
            # kubectl cp paymenthubb/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-common |cut -d " " -f1`:/ph-ee-connector-integration-test/build integration_report/test-report

            for i in $(kubectl get pods -n paymenthub | grep g2p-sandbox-test-common |cut -d " " -f1); do
                echo "--------------------------------------------------------------------Logs of $i Start---------------------------------------------------------------------------" >> all_pod_logs.log
                kubectl logs -n paymenthub  $i  --all-containers=true >> all_pod_logs.log
                echo "---------------------------------------------------------------------Logs of $i End----------------------------------------------------------------------------" >> all_pod_logs.log
                echo " " >> all_pod_logs.log
                echo " " >> all_pod_logs.log
            done

            mkdir -p integration_report_final
            cp integration_report/test-report/cucumber_common.xml integration_report_final/ || echo ""
            ls integration_report/test-report/
            mv all_pod_logs.log integration_report/test-report/reports/tests/

      - store_test_results:
          path: integration_report_final/
      - store_artifacts:
          path: integration_report/test-report/reports/tests

  build:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: rm -f helm/g2p-sandbox-fynarfin-SIT/Chart.lock helm/g2p-sandbox-fynarfin-SIT/requirements.lock helm/g2p-sandbox-fynarfin-SIT/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      # - run: "sed -i '12s/.*/version: 0.0.0/' helm/g2p-sandbox-fynarfin-SIT/Chart.yaml"
      - run:
          name: build-and-host-g2p-fynarfin-sit
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
                echo Charts will save in https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-0.0.0$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "11s@^ *repository:.*\$@  repository: $CHART_URL@" helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
              sed -i "12s@^ *version:.*\$@  version: 0.0.0$JIRA_STORY@" helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-0.0.0"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "6s/.*/version: 0.2.0$JIRA_STORY/" helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
            cat helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
            helm dep up helm/g2p-sandbox-fynarfin-SIT
            helm package helm/g2p-sandbox-fynarfin-SIT
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-fynarfin$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-fynarfin-0.2.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-fynarfin$JIRA_STORY index.yaml ph-ee-g2psandbox-fynarfin-0.2.0$JIRA_STORY.tgz
  build-g2p-sandbox-ci-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: rm -f helm/ph-ee-g2p-sandbox-ci/Chart.lock helm/ph-ee-g2p-sandbox-ci/requirements.lock helm/ph-ee-g2p-sandbox-ci/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      # - run: "sed -i '12s/.*/version: 0.0.0/' helm/ph-ee-g2p-sandbox-ci/Chart.yaml"
      - run:
          name: build-and-host-ph-ee-g2p-sandbox-ci
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
                echo Charts will save in https://fynarfin.io/images$JIRA_STORY_DIR
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-0.0.0$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "11s@^ *repository:.*\$@  repository: $CHART_URL@" helm/ph-ee-g2p-sandbox-ci/Chart.yaml
              sed -i "12s@^ *version:.*\$@  version: 0.0.0$JIRA_STORY@" helm/ph-ee-g2p-sandbox-ci/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-g2p-sandbox-ci-0.0.0"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "6s/.*/version: 0.0.0$JIRA_STORY/" helm/ph-ee-g2p-sandbox-ci/Chart.yaml
            cat helm/ph-ee-g2p-sandbox-ci/Chart.yaml
            helm dep up helm/ph-ee-g2p-sandbox-ci
            helm package helm/ph-ee-g2p-sandbox-ci
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2p-sandbox-ci$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2p-sandbox-ci-0.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2p-sandbox-ci$JIRA_STORY index.yaml ph-ee-g2p-sandbox-ci-0.0.0$JIRA_STORY.tgz
  upgrade-g2psandbox-helm-chart:
    docker:
      - image: cimg/python:3.10
    environment:
      TERM: dumb
    steps:
      - fynarfin-orb/docker-image-availability-check-and-upgrade:
          namespace: paymenthub
          chart-base-url: https://fynarfin.io/images/fynarfin
          chart-name: ph-ee-g2psandbox-fynarfin
          chart-version: 0.2.0
          #          chart: "https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-fynarfin/ph-ee-g2psandbox-fynarfin-0.2.0.tgz"
          release-name: g2p-sandbox
          #          add-repo: "https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-fynarfin"
          cluster-name: "sit"
          aws-region: "$REGION"
          service-file-path: https://raw.githubusercontent.com/fynarfin/ph-ee-env-labs/develop/.circleci/services.txt

  host-g2-sandbox-security-fynarfin-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: rm -f helm/g2p-sandbox-security-fynarfin-SIT/Chart.lock helm/g2p-sandbox-security-fynarfin-SIT/requirements.lock helm/g2p-sandbox-security-fynarfin-SIT/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: build-and-host-g2p-sandbox-security
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-security$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "10s@^ *repository:.*\$@  repository: $CHART_URL@" helm/g2p-sandbox-security-fynarfin-SIT/Chart.yaml
              sed -i "11s@^ *version:.*\$@  version: 0.0.0$JIRA_STORY@" helm/g2p-sandbox-security-fynarfin-SIT/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-security"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "5s/.*/version: 0.0.0$JIRA_STORY/" helm/g2p-sandbox-security-fynarfin-SIT/Chart.yaml
            cat helm/g2p-sandbox-security-fynarfin-SIT/Chart.yaml
            # - run: "sed -i '4s/.*/version: 0.0.0-SNAPSHOT/' helm/g2p-sandbox-security/requirements.yaml"
            # SED & replace dependency with 0.0.0
            helm dep up helm/g2p-sandbox-security-fynarfin-SIT
            helm package helm/g2p-sandbox-security-fynarfin-SIT
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-security-fynarfin$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-security-fynarfin-0.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-security-fynarfin$JIRA_STORY index.yaml ph-ee-g2psandbox-security-fynarfin-0.0.0$JIRA_STORY.tgz
  upgrade-g2psandbox-security-helm-chart:
    docker:
      - image: cimg/python:3.10
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "sit"
          aws-region: "$REGION"
      - kubernetes/install-kubectl
      - run: |
          if ! kubectl get ns ph-infrastructure > /dev/null 2>&1; then
              kubectl create namespace ph-infrastructure
          fi
      - fynarfin-orb/docker-image-availability-check-and-upgrade:
          namespace: ph-infrastructure
          chart-base-url: https://fynarfin.io/images/fynarfin
          chart-name: ph-ee-g2psandbox-security-fynarfin
          chart-version: 0.0.0
          #          chart: "https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-security-fynarfin/ph-ee-g2psandbox-security-fynarfin-0.0.0.tgz"
          #          add-repo: "https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-security-fynarfin"
          release-name: g2p-sandbox-security
          cluster-name: "sit"
          aws-region: "$REGION"
          service-file-path: https://raw.githubusercontent.com/fynarfin/ph-ee-env-labs/develop/.circleci/services.txt

  host-dpga-compliance-barebone-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/dpga-compliance-barebone/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - run: rm -f helm/dpga-compliance-barebone/Chart.lock helm/dpga-compliance-barebone/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: host-dpga-compliance-barebone-chart
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi
            sed -i "6s/.*/version: 1.0.0$JIRA_STORY/" helm/dpga-compliance-barebone/Chart.yaml
            cat helm/dpga-compliance-barebone/Chart.yaml
            helm dep up helm/dpga-compliance-barebone
            helm package helm/dpga-compliance-barebone
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/dpga-barebone$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml dpga-barebone-1.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/dpga-barebone$JIRA_STORY index.yaml dpga-barebone-1.0.0$JIRA_STORY.tgz

  upgrade-dpga-compliance-barebone-chart:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/dpga-compliance-barebone/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "sit"
          aws-region: "$REGION"
      - kubernetes/install-kubectl
      - run: |
          if ! kubectl get ns paymenthub-dpg > /dev/null 2>&1; then
              kubectl create namespace paymenthub-dpg
          fi
      - fynarfin-orb/docker-image-availability-check-and-upgrade:
          namespace: paymenthub-dpg
          chart-base-url: https://fynarfin.io/images/fynarfin
          chart-name: dpga-barebone
          chart-version: 1.0.0
          #          chart: "https://fynarfin.io/images/fynarfin/dpga-barebone/dpga-barebone-1.0.0.tgz"
          #          add-repo: "https://fynarfin.io/images/fynarfin/dpga-barebone"
          release-name: dpga-release
          cluster-name: "sit"
          aws-region: "$REGION"
          service-file-path: https://raw.githubusercontent.com/fynarfin/ph-ee-env-labs/develop/.circleci/services.txt

  host-g2p-sandbox-fynarfin-demo-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/g2p-sandbox-fynarfin-demo/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - run: rm -f helm/g2p-sandbox-fynarfin-demo/Chart.lock helm/g2p-sandbox-fynarfin-demo/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: host-g2p-sandbox-fynarfin-demo
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi
            sed -i "6s/.*/version: 1.0.0$JIRA_STORY/" helm/g2p-sandbox-fynarfin-demo/Chart.yaml
            cat helm/g2p-sandbox-fynarfin-demo/Chart.yaml
            helm dep up helm/g2p-sandbox-fynarfin-demo
            helm package helm/g2p-sandbox-fynarfin-demo
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-fynarfin-demo$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-fynarfin-demo-1.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-fynarfin-demo$JIRA_STORY index.yaml ph-ee-g2psandbox-fynarfin-demo-1.0.0$JIRA_STORY.tgz

  upgrade-g2p-sandbox-fynarfin-demo-chart:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/g2p-sandbox-fynarfin-demo/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "sit"
          aws-region: "$REGION"
      - kubernetes/install-kubectl
      - run: |
          if ! kubectl get ns paymenthub-demo > /dev/null 2>&1; then
              kubectl create namespace paymenthub-demo
          fi
      - run: "kubectl delete clusterroles `kubectl get clusterroles |grep c-role|cut -d ' ' -f1` || echo ' ' "
      - run: "kubectl delete clusterrolebinding `kubectl get clusterrolebinding |grep c-role|cut -d ' ' -f1` || echo ' ' "
      - fynarfin-orb/docker-image-availability-check-and-upgrade:
          namespace: paymenthub-demo
          chart-base-url: https://fynarfin.io/images/fynarfin
          chart-name: ph-ee-g2psandbox-fynarfin-demo
          chart-version: 1.0.0
          release-name: g2p-sandbox-demo
          cluster-name: "sit"
          aws-region: "$REGION"
          service-file-path: https://raw.githubusercontent.com/fynarfin/ph-ee-env-labs/develop/.circleci/services.txt

  deploying-bpmns-demo-namespace:
    docker:
      - image: 'cimg/base:2022.06'
    steps:
      - checkout
      - run: |
          if [[ -n $(git show --name-only $CIRCLE_SHA1 | grep "^helm/g2p-sandbox-fynarfin-demo/") ]]; then
            echo "Directory has changed. Running the job."
          else
            echo "Directory has not changed. Skipping the job."
            circleci step halt
          fi
      - run: git clone https://github.com/fynarfin/ph-ee-env-labs
      - run: echo $AWS_PROFILE
      - run: echo $AWS_DEFAULT_PROFILE
      - run: |
          #sleep 5
          #sudo apt install -y netcat
          #until nc -vz https://zeebeops-demo.sandbox.fynarfin.io 443; do echo "Waiting for zeebe-ops service"; sleep 2; done;
      - run: |
          cd ph-ee-env-labs
          sed -i 's/zeebeops/zeebeops-demo/g' orchestration/deployBpmn.sh
          sh orchestration/deployBpmn.sh

  create-secret-paymenthub-demo-namespace:
    docker:
      - image: 'cimg/base:2022.06'
    environment:
      TERM: dumb
      NAMESPACE: paymenthub-demo
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - kubernetes/install-kubectl
      - run: git clone https://github.com/fynarfin/ph-ee-env-labs
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "sit"
          aws-region: "$REGION"
      - run: |
          cd ph-ee-env-labs
          export ENV_NAMESPACE=$NAMESPACE
          kubectl config use-context arn:aws:eks:$REGION:419830066942:cluster/sit
          kubectl config get-contexts
          cd helm/kibana-secret/
          make secrets || echo "kibana" already exists

      - run: |
          cd ph-ee-env-labs
          export ENV_NAMESPACE=$NAMESPACE
          kubectl config use-context arn:aws:eks:$REGION:419830066942:cluster/sit
          kubectl config get-contexts
          cd helm/es-secret/
          make secrets || echo "elastic-certificates" already exists  

  create-tls-secret-paymenthub-demo-namespace:
    docker:
      - image: 'cimg/base:2022.06'
    environment:
      TERM: dumb
      NAMESPACE: paymenthub-demo
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "sit"
          aws-region: "$REGION"
      - run: |
          echo "$KEY" | tr '#' '\n' > key.pem
          echo "$SSL_BUNDLE" | tr '#' '\n' > ssl-bundle.crt
          openssl x509 -in ssl-bundle.crt -text -noout
          if kubectl get secret fyn-cert --namespace $NAMESPACE &> /dev/null; then
            echo "Secret fyn-cert already exists. Skipping creation."
          else
            kubectl create secret tls fyn-cert --namespace $NAMESPACE --key=key.pem --cert=ssl-bundle.crt -o yaml
          fi

  test-chart-gov:
    docker:
      - image: cimg/openjdk:17.0.0
    steps:
      - run: git clone https://github.com/fynarfin/ph-ee-integration-test
      - run: cd ph-ee-integration-test && ./gradlew test -Dcucumber.filter.tags="@gov"
      - store_test_results:
          path: ph-ee-integration-test/build/test-results/test/TEST-org.fynarfin.integrationtest.TestRunner.xml
  test-chart-ams:
    docker:
      - image: cimg/openjdk:17.0.0
    steps:
      - run: git clone https://github.com/fynarfin/ph-ee-integration-test
      - run: cd ph-ee-integration-test && ./gradlew test -Dcucumber.filter.tags="@amsIntegration"
      - store_test_results:
          path: ph-ee-integration-test/build/test-results/test/TEST-org.fynarfin.integrationtest.TestRunner.xml

workflows:
  deploy:
    jobs:
      - build:
          context:
            - AWS
            - Helm
            - slack
      - build-g2p-sandbox-ci-chart:
          requires:
            - build
          context:
            - AWS
            - Helm
            - slack
      - host-g2-sandbox-security-fynarfin-chart:
          requires:
            - build-g2p-sandbox-ci-chart
          context:
            - AWS
            - Helm
            - slack
      - build-and-host-ph-ee-kenya:
          requires:
            - host-g2-sandbox-security-fynarfin-chart
          context:
            - AWS
            - Helm
            - slack
      - minikube-run-helm-upgrade-and-helm-test:
          requires:
            - build-and-host-ph-ee-kenya
          context:
            - AWS
            - Helm
            - slack
            - Ngrok
      #- upgrade-g2psandbox-helm-chart:
      #    requires:
      #      - build
      #      - upgrade-g2psandbox-security-helm-chart
      #    context:
      #      - AWS
      #      - Helm
      #      - slack
      #- upgrade-g2psandbox-security-helm-chart:
      #    requires:
      #      - host-g2-sandbox-security-fynarfin-chart
      #    context:
      #      - AWS
      #      - Helm
      #      - slack
      - host-dpga-compliance-barebone-chart:
          context:
            - AWS
            - Helm
            - slack
      - upgrade-dpga-compliance-barebone-chart:
          requires:
            - host-dpga-compliance-barebone-chart
          context:
            - AWS
            - Helm
            - slack
      - host-g2p-sandbox-fynarfin-demo-chart:
          context:
            - AWS
            - Helm
            - slack
      - upgrade-g2p-sandbox-fynarfin-demo-chart:
          requires:
            - host-g2p-sandbox-fynarfin-demo-chart
          context:
            - AWS
            - Helm
            - slack
      - deploying-bpmns-demo-namespace:
          requires:
            - upgrade-g2p-sandbox-fynarfin-demo-chart
          context:
            - AWS
            - Helm
            - slack
      #- create-secret-paymenthub-demo-namespace:
      #    requires:
      #      - deploying-bpmns-demo-namespace
      #    context:
      #      - AWS
      #      - Helm
      #      - slack
      #      - Secrets
      #- create-tls-secret-paymenthub-demo-namespace:
      #    requires:
      #      - upgrade-g2p-sandbox-fynarfin-demo-chart
      #    context:
      #      - AWS
      #      - Helm
      #      - slack
      #      - Secrets
      #      - TLS
      # - install-helm-chart:
      #     cluster-name: sit
      # - delete-helm-release:
      #     cluster-name: sit
      #     requires:
      #       - install-helm-chart

  
